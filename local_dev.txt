# Инструкция по локальной разработке

## 1. Первоначальная настройка

1. Создание и активация виртуального окружения:
   ```bash
   d:
   cd D:\Learn\Python\Final_certification
   python -m venv venv
   venv\Scripts\activate
   ```

2. Установка зависимостей:
   ```bash
   pip install -r requirements.txt
   ```

3. Создание файла .env:
   Создайте файл D:\Learn\Python\Final_certification\.env со следующим содержимым:
   ```
   DEBUG=True
   SECRET_KEY=jtbkw2sj64qx267#cyojqpvcl&rieub=(plcj824x(u2)9*!)8
   ALLOWED_HOSTS=localhost,127.0.0.1
   DATABASE_URL=sqlite:///db.sqlite3
   ```

4. Применение миграций:
   ```bash
   python manage.py migrate
   ```

5. Создание суперпользователя:
   ```bash
   python manage.py createsuperuser
   ```

## 2. Ежедневная работа

1. Активация виртуального окружения:
   ```bash
   d:
   cd D:\Learn\Python\Final_certification
   venv\Scripts\activate
   ```

2. Запуск сервера разработки:
   ```bash
   python manage.py runserver
   ```

3. Доступ к сайту:
   - Сайт: http://127.0.0.1:8000/
   - Админ-панель: http://127.0.0.1:8000/admin/

## 3. Работа с базой данных

### Создание резервной копии:
```bash
python manage.py dumpdata --exclude auth.permission --exclude contenttypes > backup.json
```

### Восстановление из резервной копии:
```bash
python manage.py loaddata backup.json
```

## 4. Работа с Git

### Получение последних изменений с сервера:
```bash
git pull origin main
python manage.py migrate  # если были изменения в моделях
python manage.py collectstatic --noinput  # если были изменения в статических файлах
```

### Отправка изменений на сервер:
```bash
git add .
git commit -m "Описание изменений"
git push origin main
```

## 5. Установка новых пакетов

1. Установка пакета:
   ```bash
   pip install package_name
   ```

2. Обновление requirements.txt:
   ```bash
   pip freeze > requirements.txt
   ```

## 6. Полезные команды

### Создание миграций:
```bash
python manage.py makemigrations
```

### Просмотр статуса миграций:
```bash
python manage.py showmigrations
```

### Сбор статических файлов:
```bash
python manage.py collectstatic
```

### Очистка кэша Python:
```bash
python manage.py clean_pyc
python manage.py clean_pycache
```

## 7. Решение проблем

1. Если не работают статические файлы:
   - Проверьте настройки STATIC_URL и STATIC_ROOT в settings.py
   - Выполните collectstatic
   - Убедитесь, что DEBUG=True в режиме разработки

2. Если не работает база данных:
   - Проверьте права доступа к файлу db.sqlite3
   - Убедитесь, что все миграции применены
   - Проверьте настройки DATABASES в settings.py

3. Если не работает админка:
   - Проверьте, что создан суперпользователь
   - Убедитесь, что 'django.contrib.admin' есть в INSTALLED_APPS
